On Destructors and Interfaces in C++
Programming

<p>Comming from Java, I'm used to use interfaces (abstract classes with only abstract virtual methods. In C++ we only have the concept of abstract classes which are classes with at least one pure virtual function) in my type hierarchy.</p>

<p>This concept of an interface does not exist nor can or should it be used in a "copy-paste" manner. Let me give an example.</p>

<p>In Java we define an interface as:
<pre>public interface Interface {
   void method(int arg);
}
</pre>
</p>

<p>
So every subclass of Interface must implement/override method. In C++ this would look as follows when we "copy-paste" this:
<pre>class Interface 
{
  public: 
    virtual void method(int arg) = 0;
};
</pre>
</p>

<p>
Now, the C++ class cannot, by definition, function as a proper interface/abstract class. The problem is caused by the (here implicit) non-virtual destructor. So, as a result we cannot use the Interface as a base type pointer when we delete the object.
<pre>Interface* p = new Subclass();
delete p;
</pre>
here the behavior is undefined according to the C++ standard. Normally though it would just call the implicit non-virtual destructor <code>Interface::~Interface()</code>.</p>

<p>To fix this we can either define an empty virtual destructor or declare the destructor as impure virtual.</p>

<p>So either
<pre>class Interface 
{
  public: 
    virtual void method(int arg) = 0;
    virtual ~Interface(void) {}
};
</pre>
or
<pre>class Interface 
{
  public: 
    virtual void method(int arg) = 0;
    virtual ~Interface(void) = 0;
};
</pre>
</p>

<p>In the second case, it would be impossible to instantiate a subclass because the destructor of the subclass calls the destructor of its parents. Meaning <code>Interface::~Interface</code> would be called but does not exists. Hence, it would result in an undefined reference error. A solution to this is to use an impure destructor [<a href="http://www.gotw.ca/gotw/031.htm">1</a>]. This means we leave the pure virtual declaration of the destructor but still provide an implementation in the cpp file.</p>

<p>But in any case you must to tell the compiler that you want the destructor to be virtual.</p>

<p>References:
[1] <a href="http://www.gotw.ca/gotw/031.htm">http://www.gotw.ca/gotw/031.htm</a></p>